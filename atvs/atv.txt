Atividade 1 – Informações Pessoais
1. Crie variáveis para armazenar seu nome, idade e cor favorita. 
2. Em seguida, imprima cada uma dessas variáveis na tela, com uma mensagem descritiva para cada uma (ex: "Nome: [seu nome]").


Atividade 2 – Desafio
1.  Peça ao usuário para digitar seu animal de estimação favorito.
2.  Armazene a resposta em uma variável.
3.  Imprima na tela uma mensagem que inclua a resposta do usuário (ex: "Seu animal de estimação favorito é um [animal]").


Atividade 3 – Tipos de Dados
1.  Crie uma variável para armazenar uma string (ex: seu nome).
2.  Crie uma variável para armazenar um número inteiro (ex: seu ano de nascimento).
3.  Crie uma variável para armazenar um valor booleano (ex: `true` se você gosta de programar).
4.  Imprima o valor e o tipo de cada variável no console.


Atividade 4 – Concatenação de Strings
1.  Crie duas variáveis, `parte1` e `parte2`, e atribua a elas partes de uma frase (ex: "Programar é " e "muito legal!").
2.  Combine essas duas variáveis em uma nova variável chamada `fraseCompleta`.
3.  Mostre a `fraseCompleta` no console.


Atividade 5 – Aritmética
1.  Crie uma variável `base` e uma variável `altura` para um retângulo.
2.  Calcule a área do retângulo (`area = base * altura`).
3.  Calcule o perímetro do retângulo (`perimetro = 2 * (base + altura)`).
4.  Imprima a área e o perímetro no console com mensagens descritivas.


Atividade 6 - Conversor de Temperatura
1. Peça ao usuário uma temperatura em Celsius.
2. Converta a temperatura para Fahrenheit usando a fórmula: F = (C * 9/5) + 32.
3. Mostre o resultado no console.


Atividade 7 - Cálculo do desconto
1. Uma loja oferece 10% de desconto em qualquer produto. 
2. Receba o valor total da compra e mostre o valor final com o desconto.


Atividade 8 - Cálculo do salário líquido
1. Escreva um programa que receba o salário bruto de um funcionário e calcule o salário líquido, considerando um desconto de 15% para impostos. 
2. Em seguida, mostre o valor do desconto e o salário líquido final.


Atividade 9 – Contagem regressiva
1. Peça ao usuário um número N.
2. Imprima todos os números de N até 1 usando `for`.


Atividade 10 – Imprimindo caracteres
1. Peça ao usuário uma palavra.
2. Percorra a palavra e imprima cada caractere em uma linha separada usando `for`.


Atividade 11 – Contando Vogais
1. Peça ao usuário uma frase.
2. Conte quantas vogais (a, e, i, o, u) existem na frase usando um loop `for`.
3. Mostre o número total de vogais no console.


Atividade 12 – Loop com condição de parada
1. Peça ao usuário para digitar nomes de cidades até que ele digite a palavra "fim".
2. Ao final, mostre quantos nomes de cidades foram digitados.


Atividade 13 – Soma com condição de parada
1. Peça ao usuário para digitar números.
2. Quando a soma dos números digitados for maior que 100, o programa deve parar e mostrar a soma final.


Atividade 14 – Contagem de pares e ímpares
1. Peça ao usuário para digitar números. 
2. O programa deve parar quando o usuário digitar o número 0.
3. Ao final, mostre quantos números pares e quantos números ímpares foram digitados (sem contar o 0).


Atividade 15 - Loop ou condição de parada
1. Peça ao usuário para digitar números até que digite o número 0
2. Ao  final, mostre quantos números foram digitados (sem contar o 0)


Atividade 16 - Nomes em ordem alfabetica
1.Peça tres nomes ao usuario
2.Os coloque em orddem alfabetiva


Atividade 17 - Contagem de Votos Simples
Imagine que você está construindo um sistema de votação para um concurso de talentos. Cada voto é registrado em um array de strings. 
Você precisa contar quantos votos cada candidato recebeu.
1. Crie uma função chamada contarVotos que recebe um array de strings. Cada string representa o nome de um candidato.
2. Dentro da função, crie um objeto vazio para armazenar a contagem de votos.
3. Percorra o array de votos. Para cada voto, verifique se o candidato já existe como uma chave no seu objeto de contagem.
4. Se o candidato já existir, adicione 1 ao valor correspondente.
5. Se o candidato não existir, crie a chave e defina o valor como 1.
6. A função deve retornar o objeto de contagem de votos.


Atividade 18 - Votação por Array de Pontos
1. Crie uma função chamada calcularPontos que recebe um array de objetos. Cada objeto tem duas propriedades: candidato (string) e pontos (número).
2. Crie um objeto vazio para acumular a pontuação total de cada candidato.
3. Percorra o array de votos. Para cada objeto de voto:
   a. Acesse o nome do candidato e a quantidade de pontos.
   b. Se o candidato já estiver no seu objeto de pontuação, some os pontos atuais aos pontos existentes.
   c. Se o candidato não estiver, crie-o com a pontuação inicial.
4. A função deve retornar o objeto com a pontuação total de cada candidato.


Atividade 19 - Votação com Múltiplas Rodadas
Considere um cenário de votação com múltiplas rodadas. O objetivo é somar os votos de cada candidato em diferentes arrays de votação.
1. Crie uma função chamada somarRodadas que aceita um número variável de arrays de votos como argumentos (usando o ... para "rest parameters"). Cada array de voto é semelhante ao do Problema 1.
2. Crie um objeto para a contagem total de votos.
3. Use um loop para percorrer cada array de votos passado como argumento.
4. Dentro deste loop, use outro loop para percorrer os votos de cada array.
5. Para cada voto, some 1 ao total do candidato no seu objeto de contagem.
6. A função deve retornar o objeto com a soma total de votos de todas as rodadas.


Atividade 20: Classe `Produto`
1.  Crie uma classe chamada **`Produto`** com os atributos **`nome`** e **`preco`**.
2.  No construtor, receba esses valores e atribua-os usando **`this`**.
3.  Crie um método chamado **`exibirDetalhes()`** que imprime a seguinte frase: "O produto NOME custa R$ PRECO.".
4.  Crie duas instâncias com **`new`** e chame o método **`exibirDetalhes()`** para cada uma.
5.  **Dica**: Anote nos comentários do código onde aparecem `new`, `constructor` e `this`, explicando o papel de cada um.


Atividade 21: Classes `Livro` e `Biblioteca`
1.  Crie a classe **`Livro`** com os atributos **`titulo`** (string) e **`autor`** (string).
2.  Crie a classe **`Biblioteca`**. No seu construtor, inicie um array **`livros`** vazio.
3.  Crie um método **`adicionarLivro(livro)`** na classe **`Biblioteca`** que recebe uma instância de `Livro` e a adiciona ao array `livros`.
4.  Crie um método **`listarLivros()`** que imprime o título e o autor de cada livro no array.
5.  Crie uma instância de `Biblioteca`. Depois, crie duas instâncias de `Livro` e adicione-as à biblioteca. Por fim, chame o método `listarLivros()` para ver o resultado.
6.  **Dica**: Explique com comentários cada uso de **`this`** e a função de **`new`** ao criar as instâncias.


Atividade Prática 22: Classe `ContaBancaria`
1.  Crie uma classe chamada **`ContaBancaria`** com os atributos **`saldo`** (number) e **`numeroConta`** (string).
2.  No construtor, receba apenas o **`numeroConta`** e inicie o **`saldo`** com o valor **`0`**.
3.  Crie o método **`depositar(valor)`** que adiciona o valor ao saldo.
4.  Crie o método **`sacar(valor)`** que subtrai o valor do saldo, mas somente se houver saldo suficiente.
5.  Crie um método **`consultarSaldo()`** que imprime o saldo atual.
6.  Crie uma instância de `ContaBancaria` com `new`. Faça um depósito, depois um saque e, por fim, consulte o saldo para verificar o resultado.


Atividade 23: Sistema de Gerenciamento de Tarefas
Crie uma classe `Tarefa` e uma classe `GerenciadorDeTarefas`.
1. Classe `Tarefa:
- Deve ter os atributos **`descricao`** (string) e **`concluida`** (boolean).
- O construtor deve inicializar a `descricao` e definir `concluida` como `false` por padrão.

2. Classe `GerenciadorDeTarefas`:
- Deve ter um array privado **`tarefas`** que armazena objetos do tipo `Tarefa`.
- Implemente os seguintes métodos:
   ->`adicionarTarefa(descricao: string): void`**: Cria uma nova `Tarefa` com a descrição fornecida e a adiciona ao array.
   ->`concluirTarefa(descricao: string): boolean`**: Encontra a tarefa pela descrição e muda o atributo `concluida` para `true`. Retorne `true` se a tarefa foi encontrada e concluída, e `false` caso contrário.
   ->listarTarefas(): void`**: Exibe todas as tarefas no console, mostrando a descrição e o status (se está concluída ou pendente).


Atividade 24: Catálogo de Produtos
Crie uma classe `Produto` e uma classe `Catalogo`.
1.Classe `Produto`:
- Deve ter os atributos **`nome`** (string), **`preco`** (number) e **`emEstoque`** (boolean).
- O construtor deve inicializar todos os atributos.

2. Classe `Catalogo`:
- Deve ter um array privado **`produtos`** que armazena objetos do tipo `Produto`.
- Implemente os seguintes métodos:
   ->`adicionarProduto(produto: Produto): void`**: Adiciona um produto ao catálogo.
   ->`buscarPorNome(nome: string): Produto | undefined`**: Encontra e retorna um produto pelo nome. Use o método `find()` do array.
   ->`listarDisponiveis(): void`**: Exibe no console apenas os produtos que estão com `emEstoque` igual a `true`.


Atividade 25: Gerenciamento de Funcionários
Crie uma classe `Funcionario` e uma classe `Empresa`.
1.Classe `Funcionario`:
- Deve ter os atributos **`nome`** (string) e **`salario`** (number).
- O construtor deve inicializar os atributos.

2. Classe `Empresa`:
- Deve ter um array privado **`funcionarios`** que armazena objetos do tipo `Funcionario`.
- Implemente os seguintes métodos:
   ->`contratar(funcionario: Funcionario): void`**: Adiciona um funcionário ao quadro da empresa.
   ->`demitir(nome: string): boolean`**: Remove um funcionário pelo nome. Retorne `true` se o funcionário foi demitido, e `false` se não foi encontrado.
   ->`calcularMediaSalarial(): number`**: Calcula e retorna a média salarial de todos os funcionários. Se não houver funcionários, retorne `0`. Use um laço `for...of` para somar os salários.